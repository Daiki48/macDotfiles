# filer #
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#default_hidden=1
let g:fern_disable_startup_warnings=1
nnoremap <silent><C-n> :Fern .<CR>
nmap <silent> b <BS><CR>

function! s:fern_settings() abort
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
endfunction

augroup fern-settings
  autocmd!
  autocmd FileType fern call s:fern_settings()
augroup END
'''

[[plugins]]
repo = 'yuki-yano/fern-preview.vim'
on_source = 'fern.vim'

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = 'fern.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
on_source = 'fern.vim'
hook_source = '''
let g:fern#renderer='nerdfont'
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_source = 'fern.vim'
hook_source = '''
set encoding=utf8
set guifont=Hack_Nerd_Font:h15
'''

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_source = '''
augroup my-glyph-palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
  autocmd FileType nerdtree,startify call glyph_palette#apply()
augroup END
'''

# 初めての自作プラグイン #
[[plugins]]
repo = 'Daiki48/hello-daiki'

# HTML closetag #
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
source ~/.config/nvim/plugins/closetag.rc.vim
'''

# fzf
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_source = 'telescope.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_source = 'telescope.nvim'

# comp
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('completionMenu', 'pum.vim')
call ddc#custom#patch_global('sources', ['around', 'nvim-lsp', 'file', 'nextword', 'buffer'])
call ddc#custom#patch_global('sourceOptions', {
\ '_': {
\   'matchers': ['matcher_fuzzy', 'matcher_head'],
\   'sorters': ['sorter_fuzzy', 'sorter_rank'], 
\   'converters': ['converter_remove_overlap', 'converter_truncate_abbr'],
\ },
\ 'around': {
\   'mark': '[around]', 
\   'matchers': ['matcher_head', 'matcher_length'],
\ },
\ 'nvim-lsp': {
\   'mark': '[lsp]',
\   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\ },
\ 'buffer': {
\   'mark': '[buffer]',
\   'matchers': ['matcher_head', 'matcher_length'],
\   'minAutoCompleteLength': 1,
\ },
\ 'cmdline': {
\   'mark': '[cmdline]',
\   'forceCompletionPattern': '\S/\S*',
\ },
\ 'cmdline-history': {
\   'mark': '[cmd-history]',
\   'sorters': [],
\ },
\ 'nextword': {
\   'mark': '[nextword]',
\   'maxItems': 10,
\   'minAutoCompleteLength': 3,
\   'isVolatile': v:true,
\ },
\ 'file': {
\   'mark': '[file]',
\   'forceCompletionPattern': '\S/\S*',
\   'minAutoCompleteLength': 1,
\   'isVolatile': v:true,
\   'sorters': [],
\ },
\ 'rg': {
\   'mark': '[rg]',
\   'minAutoCompleteLength': 1,
\   'matchers': ['matcher_head', 'matcher_length'],
\ },
\})

call ddc#custom#patch_global('sourceParams', {
\ 'around': {'maxSize': 500},
\ 'limitBytes': 5000000,
\ 'fromAltBuf': v:false,
\ 'forceCollect': v:false,
\ 'nvim-lsp': {'kindLabels': {
\    "Text": " Text",
\    "Method": " Method",
\    "Function": " Function",
\    "Constructor": " Constructor",
\    "Field": "ﰠ Field",
\    "Variable": " Variable",
\    "Class": "ﴯ Class",
\    "Interface": " Interface",
\    "Module": " Module",
\    "Property": "ﰠ Property",
\    "Unit": "塞 Unit",
\    "Value": " Value",
\    "Enum": " Enum",
\    "Keyword": " Keyword",
\    "Snippet": " Snippet",
\    "Color": " Color",
\    "File": " File",
\    "Reference": " Reference",
\    "Folder": " Folder",
\    "EnumMember": " EnumMember",
\    "Constant": " Constant",
\    "Struct": "פּ Struct",
\    "Event": " Event",
\    "Operator": " Operator",
\    "TypeParameter": "TypeParameter"
\ }},
\ })

call ddc#enable()
call popup_preview#enable()
call signature_help#enable()

call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])
" {{{
cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
cnoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

augroup MyAutoCmd
  autocmd!
  autocmd CmdlineEnter * call CommandlinePre()
  autocmd CmdlineLeave * call CommandlinePost()
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
augroup End


function! CommandlinePre() abort
  call denops#plugin#wait('ddc')

  " Overwrite sources
  let current = ddc#custom#get_current()
  if exists('s:in_cmdline') && s:in_cmdline
    return
  endif

  let s:prev_buffer_sources = current
  if getcmdtype() == '/'
    call ddc#custom#patch_buffer('sources', ['buffer', 'cmdline-history'])
  elseif getcmdtype() == '@'
    call ddc#custom#patch_buffer('sources', ['buffer'])
  else
    call ddc#custom#patch_buffer('sources', ['cmdline','cmdline-history', 'buffer'])
  endif
  let s:in_cmdline = v:true

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_sources)
  let s:in_cmdline = v:false
endfunction

inoremap <Tab> <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# markdown preview
[[plugins]]
repo = 'kat0h/bufpreview.vim'
on_ft = ['markdown']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# [[plugins]]
# repo = 'VonHeikemen/fine-cmdline.nvim'
# on_source = 'nui.nvim'
# hook_add = '''
# nnoremap : <cmd>FineCmdline<CR>
# '''

[[plugins]]
repo = 'VonHeikemen/searchbox.nvim'
on_source = 'nui.nvim'
hook_add = '''
nnoremap / <cmd>SearchBoxIncSearch<CR>
'''

